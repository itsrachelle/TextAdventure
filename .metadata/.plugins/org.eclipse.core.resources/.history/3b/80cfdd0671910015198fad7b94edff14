
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.net.InetAddress;
import java.net.Socket;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.nio.CharBuffer;
import java.util.ArrayList;

public class Client {

    static ArrayList<String> decisionsList = null;
    String intialScene = "";
    static BufferedReader input;
    static PrintWriter output;
    Socket clientSock;
    static String currentScene = "";

    public Client(String hostNameIn, int portNumIn) {
        // connects to server
        // grab i/o streams
        // wait for response (send/receive)

        decisionsList = new ArrayList<String>();
        
        try {

            clientSock = new Socket(hostNameIn, portNumIn);
            output = new PrintWriter(clientSock.getOutputStream(), true);
            input = new BufferedReader(new InputStreamReader(clientSock.getInputStream()));

        } catch (UnknownHostException e) {
            System.err.println("Don't know about host " + hostNameIn);
            System.exit(1);
        } catch (IOException e) {
            System.err.println("Couldn't get I/O for the connection to " + hostNameIn);
            System.exit(1);
        }

    }

    public static void main(String[] args) throws IOException {

        if (args.length != 2) {
            System.err.println("Usage: java EchoClient <host name> <port number>");
            System.exit(1);
        }

        String hostName = args[0];
        int portNumber = Integer.parseInt(args[1]);

        new Client(hostName, portNumber);
        String clientAdventureChoice = AdventureMain.getAdventureChoiceFromUserInput(AdventureMain.getValidAdventures());
        print("My adventure choice is: " + clientAdventureChoice);
        output.print(clientAdventureChoice);
        receive();
    }

    private static void send(String choice) {
        output.println(choice);
    }

    static private void receive() {
        try {
        
            String inputLine;
            while ((inputLine = input.readLine()) != null) {
                if (inputLine.charAt(0) == 'Z') {
                    System.out.print("End of adventure");
                    break;
                }
                
                // index of options
                Integer textToTheRightOfBar = inputLine.lastIndexOf("|") + 1;

                currentScene = inputLine.substring(0,textToTheRightOfBar-2);
                // Decision all in one string, seperated by a semicolon (org
                // implememtation)
                String decisionsWithSemiColons = inputLine.substring(textToTheRightOfBar,
                        inputLine.length());

                // Gives array of options as strings
                String[] decisionsFormatted = decisionsWithSemiColons.split(";");
                
                System.out.println("From server options: ");
                for (String decision : decisionsFormatted) {
                    System.out.println(decision);
                    decisionsList.add(decision);

                }

                processInput();
            }
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(-1);
        }
        //}
    }

    static private void processInput() {

        BufferedReader stdInput = new BufferedReader(new InputStreamReader(System.in));

        try {
            String inputChoice = null;
            while (!(decisionsList.contains(inputChoice))) {
                if ((inputChoice = stdInput.readLine()) != null) {
                    System.out.println(currentScene);
                    System.out.println(AdventureMain.getChoicesWithFormating(decisionsList));

                    if (decisionsList.contains(inputChoice)) {
                        
                        send(inputChoice);
                    }
                }
            }

        } catch (IOException e) {
            e.printStackTrace();
            System.exit(-1);
        }

    }

}
